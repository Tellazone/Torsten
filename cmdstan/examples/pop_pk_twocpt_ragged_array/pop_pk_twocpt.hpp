// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace pop_pk_twocpt_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/Users/yiz/Work/cmdstan/examples/pop_pk_twocpt_ragged_array/pop_pk_twocpt.stan");
    reader.add_event(159, 157, "end", "/Users/yiz/Work/cmdstan/examples/pop_pk_twocpt_ragged_array/pop_pk_twocpt.stan");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
twoCptModelODE(const T0__& t,
                   const std::vector<T1__>& x,
                   const std::vector<T2__>& parms,
                   const std::vector<T3__>& rate,
                   const std::vector<int>& dummy, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        local_scalar_t__ CL;
        (void) CL;  // dummy to suppress unused var warning

        stan::math::initialize(CL, DUMMY_VAR__);
        stan::math::fill(CL,DUMMY_VAR__);
        stan::math::assign(CL,get_base1(parms,1,"parms",1));
        current_statement_begin__ = 12;
        local_scalar_t__ Q;
        (void) Q;  // dummy to suppress unused var warning

        stan::math::initialize(Q, DUMMY_VAR__);
        stan::math::fill(Q,DUMMY_VAR__);
        stan::math::assign(Q,get_base1(parms,2,"parms",1));
        current_statement_begin__ = 13;
        local_scalar_t__ V1;
        (void) V1;  // dummy to suppress unused var warning

        stan::math::initialize(V1, DUMMY_VAR__);
        stan::math::fill(V1,DUMMY_VAR__);
        stan::math::assign(V1,get_base1(parms,3,"parms",1));
        current_statement_begin__ = 14;
        local_scalar_t__ V2;
        (void) V2;  // dummy to suppress unused var warning

        stan::math::initialize(V2, DUMMY_VAR__);
        stan::math::fill(V2,DUMMY_VAR__);
        stan::math::assign(V2,get_base1(parms,4,"parms",1));
        current_statement_begin__ = 15;
        local_scalar_t__ ka;
        (void) ka;  // dummy to suppress unused var warning

        stan::math::initialize(ka, DUMMY_VAR__);
        stan::math::fill(ka,DUMMY_VAR__);
        stan::math::assign(ka,get_base1(parms,5,"parms",1));
        current_statement_begin__ = 18;
        local_scalar_t__ k10;
        (void) k10;  // dummy to suppress unused var warning

        stan::math::initialize(k10, DUMMY_VAR__);
        stan::math::fill(k10,DUMMY_VAR__);
        stan::math::assign(k10,(CL / V1));
        current_statement_begin__ = 19;
        local_scalar_t__ k12;
        (void) k12;  // dummy to suppress unused var warning

        stan::math::initialize(k12, DUMMY_VAR__);
        stan::math::fill(k12,DUMMY_VAR__);
        stan::math::assign(k12,(Q / V1));
        current_statement_begin__ = 20;
        local_scalar_t__ k21;
        (void) k21;  // dummy to suppress unused var warning

        stan::math::initialize(k21, DUMMY_VAR__);
        stan::math::fill(k21,DUMMY_VAR__);
        stan::math::assign(k21,(Q / V2));
        current_statement_begin__ = 23;
        validate_non_negative_index("y", "3", 3);
        vector<local_scalar_t__> y(3);
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y,DUMMY_VAR__);


        current_statement_begin__ = 27;
        stan::model::assign(y, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    (-(ka) * get_base1(x,1,"x",1)), 
                    "assigning variable y");
        current_statement_begin__ = 28;
        stan::model::assign(y, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    (((ka * get_base1(x,1,"x",1)) - ((k10 + k12) * get_base1(x,2,"x",1))) + (k21 * get_base1(x,3,"x",1))), 
                    "assigning variable y");
        current_statement_begin__ = 29;
        stan::model::assign(y, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    ((k12 * get_base1(x,2,"x",1)) - (k21 * get_base1(x,3,"x",1))), 
                    "assigning variable y");
        current_statement_begin__ = 31;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct twoCptModelODE_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const T0__& t,
                   const std::vector<T1__>& x,
                   const std::vector<T2__>& parms,
                   const std::vector<T3__>& rate,
                   const std::vector<int>& dummy, std::ostream* pstream__) const {
        return twoCptModelODE(t, x, parms, rate, dummy, pstream__);
    }
};

class pop_pk_twocpt_model : public prob_grad {
private:
    int np;
    int nt;
    int nObs;
    vector<int> iObs;
    vector<int> cmt;
    vector<int> evid;
    vector<int> addl;
    vector<int> ss;
    vector<double> amt;
    vector<double> time;
    vector<double> rate;
    vector<double> ii;
    vector<vector_d> cObs;
    vector<vector_d> logCObs;
    vector<int> len;
    vector<int> len_theta;
    vector<int> len_biovar;
    vector<int> len_tlag;
    int nTheta;
    int nCmt;
    vector<vector<double> > biovar;
    vector<vector<double> > tlag;
public:
    pop_pk_twocpt_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    pop_pk_twocpt_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "pop_pk_twocpt_model_namespace::pop_pk_twocpt_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "np", "int", context__.to_vec());
            np = int(0);
            vals_i__ = context__.vals_i("np");
            pos__ = 0;
            np = vals_i__[pos__++];
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "nObs", "int", context__.to_vec());
            nObs = int(0);
            vals_i__ = context__.vals_i("nObs");
            pos__ = 0;
            nObs = vals_i__[pos__++];
            current_statement_begin__ = 38;
            validate_non_negative_index("iObs", "nObs", nObs);
            context__.validate_dims("data initialization", "iObs", "int", context__.to_vec(nObs));
            validate_non_negative_index("iObs", "nObs", nObs);
            iObs = std::vector<int>(nObs,int(0));
            vals_i__ = context__.vals_i("iObs");
            pos__ = 0;
            size_t iObs_limit_0__ = nObs;
            for (size_t i_0__ = 0; i_0__ < iObs_limit_0__; ++i_0__) {
                iObs[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 41;
            validate_non_negative_index("cmt", "(np * nt)", (np * nt));
            context__.validate_dims("data initialization", "cmt", "int", context__.to_vec((np * nt)));
            validate_non_negative_index("cmt", "(np * nt)", (np * nt));
            cmt = std::vector<int>((np * nt),int(0));
            vals_i__ = context__.vals_i("cmt");
            pos__ = 0;
            size_t cmt_limit_0__ = (np * nt);
            for (size_t i_0__ = 0; i_0__ < cmt_limit_0__; ++i_0__) {
                cmt[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 42;
            validate_non_negative_index("evid", "(np * nt)", (np * nt));
            context__.validate_dims("data initialization", "evid", "int", context__.to_vec((np * nt)));
            validate_non_negative_index("evid", "(np * nt)", (np * nt));
            evid = std::vector<int>((np * nt),int(0));
            vals_i__ = context__.vals_i("evid");
            pos__ = 0;
            size_t evid_limit_0__ = (np * nt);
            for (size_t i_0__ = 0; i_0__ < evid_limit_0__; ++i_0__) {
                evid[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 43;
            validate_non_negative_index("addl", "(np * nt)", (np * nt));
            context__.validate_dims("data initialization", "addl", "int", context__.to_vec((np * nt)));
            validate_non_negative_index("addl", "(np * nt)", (np * nt));
            addl = std::vector<int>((np * nt),int(0));
            vals_i__ = context__.vals_i("addl");
            pos__ = 0;
            size_t addl_limit_0__ = (np * nt);
            for (size_t i_0__ = 0; i_0__ < addl_limit_0__; ++i_0__) {
                addl[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 44;
            validate_non_negative_index("ss", "(np * nt)", (np * nt));
            context__.validate_dims("data initialization", "ss", "int", context__.to_vec((np * nt)));
            validate_non_negative_index("ss", "(np * nt)", (np * nt));
            ss = std::vector<int>((np * nt),int(0));
            vals_i__ = context__.vals_i("ss");
            pos__ = 0;
            size_t ss_limit_0__ = (np * nt);
            for (size_t i_0__ = 0; i_0__ < ss_limit_0__; ++i_0__) {
                ss[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 45;
            validate_non_negative_index("amt", "(np * nt)", (np * nt));
            context__.validate_dims("data initialization", "amt", "double", context__.to_vec((np * nt)));
            validate_non_negative_index("amt", "(np * nt)", (np * nt));
            amt = std::vector<double>((np * nt),double(0));
            vals_r__ = context__.vals_r("amt");
            pos__ = 0;
            size_t amt_limit_0__ = (np * nt);
            for (size_t i_0__ = 0; i_0__ < amt_limit_0__; ++i_0__) {
                amt[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 46;
            validate_non_negative_index("time", "(np * nt)", (np * nt));
            context__.validate_dims("data initialization", "time", "double", context__.to_vec((np * nt)));
            validate_non_negative_index("time", "(np * nt)", (np * nt));
            time = std::vector<double>((np * nt),double(0));
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_limit_0__ = (np * nt);
            for (size_t i_0__ = 0; i_0__ < time_limit_0__; ++i_0__) {
                time[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 47;
            validate_non_negative_index("rate", "(np * nt)", (np * nt));
            context__.validate_dims("data initialization", "rate", "double", context__.to_vec((np * nt)));
            validate_non_negative_index("rate", "(np * nt)", (np * nt));
            rate = std::vector<double>((np * nt),double(0));
            vals_r__ = context__.vals_r("rate");
            pos__ = 0;
            size_t rate_limit_0__ = (np * nt);
            for (size_t i_0__ = 0; i_0__ < rate_limit_0__; ++i_0__) {
                rate[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("ii", "(np * nt)", (np * nt));
            context__.validate_dims("data initialization", "ii", "double", context__.to_vec((np * nt)));
            validate_non_negative_index("ii", "(np * nt)", (np * nt));
            ii = std::vector<double>((np * nt),double(0));
            vals_r__ = context__.vals_r("ii");
            pos__ = 0;
            size_t ii_limit_0__ = (np * nt);
            for (size_t i_0__ = 0; i_0__ < ii_limit_0__; ++i_0__) {
                ii[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 50;
            validate_non_negative_index("cObs", "np", np);
            validate_non_negative_index("cObs", "nObs", nObs);
            context__.validate_dims("data initialization", "cObs", "vector_d", context__.to_vec(np,nObs));
            validate_non_negative_index("cObs", "np", np);
            validate_non_negative_index("cObs", "nObs", nObs);
            cObs = std::vector<vector_d>(np,vector_d(static_cast<Eigen::VectorXd::Index>(nObs)));
            vals_r__ = context__.vals_r("cObs");
            pos__ = 0;
            size_t cObs_i_vec_lim__ = nObs;
            for (size_t i_vec__ = 0; i_vec__ < cObs_i_vec_lim__; ++i_vec__) {
                size_t cObs_limit_0__ = np;
                for (size_t i_0__ = 0; i_0__ < cObs_limit_0__; ++i_0__) {
                    cObs[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }

            // validate, data variables
            current_statement_begin__ = 35;
            check_greater_or_equal(function__,"np",np,1);
            current_statement_begin__ = 36;
            check_greater_or_equal(function__,"nt",nt,1);
            current_statement_begin__ = 37;
            check_greater_or_equal(function__,"nObs",nObs,1);
            current_statement_begin__ = 38;
            for (int k0__ = 0; k0__ < nObs; ++k0__) {
                check_greater_or_equal(function__,"iObs[k0__]",iObs[k0__],1);
            }
            current_statement_begin__ = 41;
            for (int k0__ = 0; k0__ < (np * nt); ++k0__) {
                check_greater_or_equal(function__,"cmt[k0__]",cmt[k0__],1);
            }
            current_statement_begin__ = 42;
            current_statement_begin__ = 43;
            current_statement_begin__ = 44;
            current_statement_begin__ = 45;
            current_statement_begin__ = 46;
            current_statement_begin__ = 47;
            current_statement_begin__ = 48;
            current_statement_begin__ = 50;
            for (int k0__ = 0; k0__ < np; ++k0__) {
                check_greater_or_equal(function__,"cObs[k0__]",cObs[k0__],0);
            }
            // initialize data variables
            current_statement_begin__ = 54;
            validate_non_negative_index("logCObs", "np", np);
            validate_non_negative_index("logCObs", "nObs", nObs);
            logCObs = std::vector<vector_d>(np,vector_d(static_cast<Eigen::VectorXd::Index>(nObs)));
            stan::math::fill(logCObs,DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("len", "np", np);
            len = std::vector<int>(np,int(0));
            stan::math::fill(len, std::numeric_limits<int>::min());
            current_statement_begin__ = 56;
            validate_non_negative_index("len_theta", "np", np);
            len_theta = std::vector<int>(np,int(0));
            stan::math::fill(len_theta, std::numeric_limits<int>::min());
            current_statement_begin__ = 57;
            validate_non_negative_index("len_biovar", "np", np);
            len_biovar = std::vector<int>(np,int(0));
            stan::math::fill(len_biovar, std::numeric_limits<int>::min());
            current_statement_begin__ = 58;
            validate_non_negative_index("len_tlag", "np", np);
            len_tlag = std::vector<int>(np,int(0));
            stan::math::fill(len_tlag, std::numeric_limits<int>::min());
            current_statement_begin__ = 60;
            nTheta = int(0);
            stan::math::fill(nTheta, std::numeric_limits<int>::min());
            stan::math::assign(nTheta,5);
            current_statement_begin__ = 61;
            nCmt = int(0);
            stan::math::fill(nCmt, std::numeric_limits<int>::min());
            stan::math::assign(nCmt,3);
            current_statement_begin__ = 62;
            validate_non_negative_index("biovar", "(np * nt)", (np * nt));
            validate_non_negative_index("biovar", "nCmt", nCmt);
            biovar = std::vector<std::vector<double> >((np * nt),std::vector<double>(nCmt,double(0)));
            stan::math::fill(biovar,DUMMY_VAR__);
            current_statement_begin__ = 63;
            validate_non_negative_index("tlag", "(np * nt)", (np * nt));
            validate_non_negative_index("tlag", "nCmt", nCmt);
            tlag = std::vector<std::vector<double> >((np * nt),std::vector<double>(nCmt,double(0)));
            stan::math::fill(tlag,DUMMY_VAR__);

            current_statement_begin__ = 65;
            for (int id = 1; id <= np; ++id) {

                current_statement_begin__ = 66;
                stan::model::assign(logCObs, 
                            stan::model::cons_list(stan::model::index_uni(id), stan::model::nil_index_list()), 
                            stan::math::log(get_base1(cObs,id,"cObs",1)), 
                            "assigning variable logCObs");
                current_statement_begin__ = 67;
                for (int j = 1; j <= nt; ++j) {

                    current_statement_begin__ = 68;
                    for (int i = 1; i <= nCmt; ++i) {

                        current_statement_begin__ = 69;
                        stan::model::assign(biovar, 
                                    stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + j)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                    1, 
                                    "assigning variable biovar");
                        current_statement_begin__ = 70;
                        stan::model::assign(tlag, 
                                    stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + j)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                    0, 
                                    "assigning variable tlag");
                    }
                }
                current_statement_begin__ = 73;
                stan::model::assign(len, 
                            stan::model::cons_list(stan::model::index_uni(id), stan::model::nil_index_list()), 
                            nt, 
                            "assigning variable len");
                current_statement_begin__ = 74;
                stan::model::assign(len_theta, 
                            stan::model::cons_list(stan::model::index_uni(id), stan::model::nil_index_list()), 
                            nt, 
                            "assigning variable len_theta");
                current_statement_begin__ = 75;
                stan::model::assign(len_biovar, 
                            stan::model::cons_list(stan::model::index_uni(id), stan::model::nil_index_list()), 
                            nt, 
                            "assigning variable len_biovar");
                current_statement_begin__ = 76;
                stan::model::assign(len_tlag, 
                            stan::model::cons_list(stan::model::index_uni(id), stan::model::nil_index_list()), 
                            nt, 
                            "assigning variable len_tlag");
            }

            // validate transformed data
            current_statement_begin__ = 54;
            current_statement_begin__ = 55;
            for (int k0__ = 0; k0__ < np; ++k0__) {
                check_greater_or_equal(function__,"len[k0__]",len[k0__],1);
            }
            current_statement_begin__ = 56;
            for (int k0__ = 0; k0__ < np; ++k0__) {
                check_greater_or_equal(function__,"len_theta[k0__]",len_theta[k0__],1);
            }
            current_statement_begin__ = 57;
            for (int k0__ = 0; k0__ < np; ++k0__) {
                check_greater_or_equal(function__,"len_biovar[k0__]",len_biovar[k0__],1);
            }
            current_statement_begin__ = 58;
            for (int k0__ = 0; k0__ < np; ++k0__) {
                check_greater_or_equal(function__,"len_tlag[k0__]",len_tlag[k0__],1);
            }
            current_statement_begin__ = 60;
            current_statement_begin__ = 61;
            current_statement_begin__ = 62;
            current_statement_begin__ = 63;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 81;
            validate_non_negative_index("CL", "np", np);
            num_params_r__ += np;
            current_statement_begin__ = 82;
            validate_non_negative_index("Q", "np", np);
            num_params_r__ += np;
            current_statement_begin__ = 83;
            validate_non_negative_index("V1", "np", np);
            num_params_r__ += np;
            current_statement_begin__ = 84;
            validate_non_negative_index("V2", "np", np);
            num_params_r__ += np;
            current_statement_begin__ = 85;
            validate_non_negative_index("ka", "np", np);
            num_params_r__ += np;
            current_statement_begin__ = 86;
            validate_non_negative_index("sigma", "np", np);
            num_params_r__ += np;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~pop_pk_twocpt_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("CL")))
            throw std::runtime_error("variable CL missing");
        vals_r__ = context__.vals_r("CL");
        pos__ = 0U;
        validate_non_negative_index("CL", "np", np);
        context__.validate_dims("initialization", "CL", "double", context__.to_vec(np));
        std::vector<double> CL(np,double(0));
        for (int i0__ = 0U; i0__ < np; ++i0__)
            CL[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < np; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,CL[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable CL: ") + e.what());
        }

        if (!(context__.contains_r("Q")))
            throw std::runtime_error("variable Q missing");
        vals_r__ = context__.vals_r("Q");
        pos__ = 0U;
        validate_non_negative_index("Q", "np", np);
        context__.validate_dims("initialization", "Q", "double", context__.to_vec(np));
        std::vector<double> Q(np,double(0));
        for (int i0__ = 0U; i0__ < np; ++i0__)
            Q[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < np; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,Q[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Q: ") + e.what());
        }

        if (!(context__.contains_r("V1")))
            throw std::runtime_error("variable V1 missing");
        vals_r__ = context__.vals_r("V1");
        pos__ = 0U;
        validate_non_negative_index("V1", "np", np);
        context__.validate_dims("initialization", "V1", "double", context__.to_vec(np));
        std::vector<double> V1(np,double(0));
        for (int i0__ = 0U; i0__ < np; ++i0__)
            V1[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < np; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,V1[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable V1: ") + e.what());
        }

        if (!(context__.contains_r("V2")))
            throw std::runtime_error("variable V2 missing");
        vals_r__ = context__.vals_r("V2");
        pos__ = 0U;
        validate_non_negative_index("V2", "np", np);
        context__.validate_dims("initialization", "V2", "double", context__.to_vec(np));
        std::vector<double> V2(np,double(0));
        for (int i0__ = 0U; i0__ < np; ++i0__)
            V2[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < np; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,V2[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable V2: ") + e.what());
        }

        if (!(context__.contains_r("ka")))
            throw std::runtime_error("variable ka missing");
        vals_r__ = context__.vals_r("ka");
        pos__ = 0U;
        validate_non_negative_index("ka", "np", np);
        context__.validate_dims("initialization", "ka", "double", context__.to_vec(np));
        std::vector<double> ka(np,double(0));
        for (int i0__ = 0U; i0__ < np; ++i0__)
            ka[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < np; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,ka[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ka: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "np", np);
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec(np));
        std::vector<double> sigma(np,double(0));
        for (int i0__ = 0U; i0__ < np; ++i0__)
            sigma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < np; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> CL;
            size_t dim_CL_0__ = np;
            CL.reserve(dim_CL_0__);
            for (size_t k_0__ = 0; k_0__ < dim_CL_0__; ++k_0__) {
                if (jacobian__)
                    CL.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    CL.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> Q;
            size_t dim_Q_0__ = np;
            Q.reserve(dim_Q_0__);
            for (size_t k_0__ = 0; k_0__ < dim_Q_0__; ++k_0__) {
                if (jacobian__)
                    Q.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    Q.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> V1;
            size_t dim_V1_0__ = np;
            V1.reserve(dim_V1_0__);
            for (size_t k_0__ = 0; k_0__ < dim_V1_0__; ++k_0__) {
                if (jacobian__)
                    V1.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    V1.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> V2;
            size_t dim_V2_0__ = np;
            V2.reserve(dim_V2_0__);
            for (size_t k_0__ = 0; k_0__ < dim_V2_0__; ++k_0__) {
                if (jacobian__)
                    V2.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    V2.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> ka;
            size_t dim_ka_0__ = np;
            ka.reserve(dim_ka_0__);
            for (size_t k_0__ = 0; k_0__ < dim_ka_0__; ++k_0__) {
                if (jacobian__)
                    ka.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    ka.push_back(in__.scalar_lb_constrain(0));
            }

            vector<local_scalar_t__> sigma;
            size_t dim_sigma_0__ = np;
            sigma.reserve(dim_sigma_0__);
            for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(0));
            }


            // transformed parameters
            current_statement_begin__ = 90;
            validate_non_negative_index("theta", "(np * nt)", (np * nt));
            validate_non_negative_index("theta", "nTheta", nTheta);
            vector<vector<local_scalar_t__> > theta((np * nt), (vector<local_scalar_t__>(nTheta)));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta,DUMMY_VAR__);
            current_statement_begin__ = 91;
            validate_non_negative_index("cHat", "nt", nt);
            validate_non_negative_index("cHat", "np", np);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > cHat(np, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(cHat, DUMMY_VAR__);
            stan::math::fill(cHat,DUMMY_VAR__);
            current_statement_begin__ = 92;
            validate_non_negative_index("cHatObs", "nObs", nObs);
            validate_non_negative_index("cHatObs", "np", np);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > cHatObs(np, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nObs))));
            stan::math::initialize(cHatObs, DUMMY_VAR__);
            stan::math::fill(cHatObs,DUMMY_VAR__);
            current_statement_begin__ = 93;
            validate_non_negative_index("x", "nt", nt);
            validate_non_negative_index("x", "3", 3);
            validate_non_negative_index("x", "np", np);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > x(np, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(3))));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x,DUMMY_VAR__);


            current_statement_begin__ = 95;
            for (int id = 1; id <= np; ++id) {

                current_statement_begin__ = 96;
                for (int it = 1; it <= nt; ++it) {

                    current_statement_begin__ = 97;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + it)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                get_base1(CL,id,"CL",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 98;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + it)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                get_base1(Q,id,"Q",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 99;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + it)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                get_base1(V1,id,"V1",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 100;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + it)), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                                get_base1(V2,id,"V2",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 101;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + it)), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                                get_base1(ka,id,"ka",1), 
                                "assigning variable theta");
                }
            }
            current_statement_begin__ = 117;
            stan::math::assign(x, pop_pk_generalOdeModel_bdf(twoCptModelODE_functor__(), 3, len, time, amt, rate, ii, evid, cmt, addl, ss, len_theta, theta, len_biovar, biovar, len_tlag, tlag, pstream__));
            current_statement_begin__ = 123;
            for (int id = 1; id <= np; ++id) {

                current_statement_begin__ = 124;
                stan::model::assign(cHat, 
                            stan::model::cons_list(stan::model::index_uni(id), stan::model::nil_index_list()), 
                            elt_divide(col(get_base1(x,id,"x",1),2),get_base1(V1,id,"V1",1)), 
                            "assigning variable cHat");
            }
            current_statement_begin__ = 127;
            for (int id = 1; id <= np; ++id) {

                current_statement_begin__ = 128;
                for (int i = 1; i <= nObs; ++i) {

                    current_statement_begin__ = 129;
                    stan::model::assign(cHatObs, 
                                stan::model::cons_list(stan::model::index_uni(id), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(get_base1(cHat,id,"cHat",1),get_base1(iObs,i,"iObs",1),"cHat",2), 
                                "assigning variable cHatObs");
                }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < (np * nt); ++i0__) {
                for (int i1__ = 0; i1__ < nTheta; ++i1__) {
                    if (stan::math::is_uninitialized(theta[i0__][i1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: theta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < np; ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    if (stan::math::is_uninitialized(cHat[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: cHat" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < np; ++i0__) {
                for (int i1__ = 0; i1__ < nObs; ++i1__) {
                    if (stan::math::is_uninitialized(cHatObs[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: cHatObs" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < np; ++i0__) {
                for (int i1__ = 0; i1__ < nt; ++i1__) {
                    for (int i2__ = 0; i2__ < 3; ++i2__) {
                        if (stan::math::is_uninitialized(x[i0__](i1__,i2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: x" << '[' << i0__ << ']' << '[' << i1__ << ']' << '[' << i2__ << ']';
                            throw std::runtime_error(msg__.str());
                        }
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 90;
            current_statement_begin__ = 91;
            for (int k0__ = 0; k0__ < np; ++k0__) {
                check_greater_or_equal(function__,"cHat[k0__]",cHat[k0__],0);
            }
            current_statement_begin__ = 92;
            for (int k0__ = 0; k0__ < np; ++k0__) {
                check_greater_or_equal(function__,"cHatObs[k0__]",cHatObs[k0__],0);
            }
            current_statement_begin__ = 93;
            for (int k0__ = 0; k0__ < np; ++k0__) {
                check_greater_or_equal(function__,"x[k0__]",x[k0__],0);
            }

            // model body

            current_statement_begin__ = 136;
            for (int id = 1; id <= np; ++id) {

                current_statement_begin__ = 137;
                lp_accum__.add(lognormal_log<propto__>(get_base1(CL,id,"CL",1), stan::math::log(10), 0.25));
                current_statement_begin__ = 138;
                lp_accum__.add(lognormal_log<propto__>(get_base1(Q,id,"Q",1), stan::math::log(15), 0.5));
                current_statement_begin__ = 139;
                lp_accum__.add(lognormal_log<propto__>(get_base1(V1,id,"V1",1), stan::math::log(35), 0.25));
                current_statement_begin__ = 140;
                lp_accum__.add(lognormal_log<propto__>(get_base1(V2,id,"V2",1), stan::math::log(105), 0.5));
                current_statement_begin__ = 141;
                lp_accum__.add(lognormal_log<propto__>(get_base1(ka,id,"ka",1), stan::math::log(2.5), 1));
                current_statement_begin__ = 142;
                lp_accum__.add(cauchy_log<propto__>(get_base1(sigma,id,"sigma",1), 0, 1));
                current_statement_begin__ = 144;
                lp_accum__.add(normal_log<propto__>(get_base1(logCObs,id,"logCObs",1), stan::math::log(get_base1(cHatObs,id,"cHatObs",1)), get_base1(sigma,id,"sigma",1)));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("CL");
        names__.push_back("Q");
        names__.push_back("V1");
        names__.push_back("V2");
        names__.push_back("ka");
        names__.push_back("sigma");
        names__.push_back("theta");
        names__.push_back("cHat");
        names__.push_back("cHatObs");
        names__.push_back("x");
        names__.push_back("cObsPred");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(np);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(np);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(np);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(np);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(np);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(np);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((np * nt));
        dims__.push_back(nTheta);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(np);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(np);
        dims__.push_back(nObs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(np);
        dims__.push_back(nt);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(np);
        dims__.push_back(nObs);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "pop_pk_twocpt_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> CL;
        size_t dim_CL_0__ = np;
        for (size_t k_0__ = 0; k_0__ < dim_CL_0__; ++k_0__) {
            CL.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> Q;
        size_t dim_Q_0__ = np;
        for (size_t k_0__ = 0; k_0__ < dim_Q_0__; ++k_0__) {
            Q.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> V1;
        size_t dim_V1_0__ = np;
        for (size_t k_0__ = 0; k_0__ < dim_V1_0__; ++k_0__) {
            V1.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> V2;
        size_t dim_V2_0__ = np;
        for (size_t k_0__ = 0; k_0__ < dim_V2_0__; ++k_0__) {
            V2.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> ka;
        size_t dim_ka_0__ = np;
        for (size_t k_0__ = 0; k_0__ < dim_ka_0__; ++k_0__) {
            ka.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> sigma;
        size_t dim_sigma_0__ = np;
        for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
            for (int k_0__ = 0; k_0__ < np; ++k_0__) {
            vars__.push_back(CL[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < np; ++k_0__) {
            vars__.push_back(Q[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < np; ++k_0__) {
            vars__.push_back(V1[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < np; ++k_0__) {
            vars__.push_back(V2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < np; ++k_0__) {
            vars__.push_back(ka[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < np; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 90;
            validate_non_negative_index("theta", "(np * nt)", (np * nt));
            validate_non_negative_index("theta", "nTheta", nTheta);
            vector<vector<local_scalar_t__> > theta((np * nt), (vector<local_scalar_t__>(nTheta)));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta,DUMMY_VAR__);
            current_statement_begin__ = 91;
            validate_non_negative_index("cHat", "nt", nt);
            validate_non_negative_index("cHat", "np", np);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > cHat(np, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nt))));
            stan::math::initialize(cHat, DUMMY_VAR__);
            stan::math::fill(cHat,DUMMY_VAR__);
            current_statement_begin__ = 92;
            validate_non_negative_index("cHatObs", "nObs", nObs);
            validate_non_negative_index("cHatObs", "np", np);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > cHatObs(np, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nObs))));
            stan::math::initialize(cHatObs, DUMMY_VAR__);
            stan::math::fill(cHatObs,DUMMY_VAR__);
            current_statement_begin__ = 93;
            validate_non_negative_index("x", "nt", nt);
            validate_non_negative_index("x", "3", 3);
            validate_non_negative_index("x", "np", np);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > x(np, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>(3))));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x,DUMMY_VAR__);


            current_statement_begin__ = 95;
            for (int id = 1; id <= np; ++id) {

                current_statement_begin__ = 96;
                for (int it = 1; it <= nt; ++it) {

                    current_statement_begin__ = 97;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + it)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                                get_base1(CL,id,"CL",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 98;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + it)), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                                get_base1(Q,id,"Q",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 99;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + it)), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                                get_base1(V1,id,"V1",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 100;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + it)), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                                get_base1(V2,id,"V2",1), 
                                "assigning variable theta");
                    current_statement_begin__ = 101;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni((((id - 1) * nt) + it)), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), 
                                get_base1(ka,id,"ka",1), 
                                "assigning variable theta");
                }
            }
            current_statement_begin__ = 117;
            stan::math::assign(x, pop_pk_generalOdeModel_bdf(twoCptModelODE_functor__(), 3, len, time, amt, rate, ii, evid, cmt, addl, ss, len_theta, theta, len_biovar, biovar, len_tlag, tlag, pstream__));
            current_statement_begin__ = 123;
            for (int id = 1; id <= np; ++id) {

                current_statement_begin__ = 124;
                stan::model::assign(cHat, 
                            stan::model::cons_list(stan::model::index_uni(id), stan::model::nil_index_list()), 
                            elt_divide(col(get_base1(x,id,"x",1),2),get_base1(V1,id,"V1",1)), 
                            "assigning variable cHat");
            }
            current_statement_begin__ = 127;
            for (int id = 1; id <= np; ++id) {

                current_statement_begin__ = 128;
                for (int i = 1; i <= nObs; ++i) {

                    current_statement_begin__ = 129;
                    stan::model::assign(cHatObs, 
                                stan::model::cons_list(stan::model::index_uni(id), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(get_base1(cHat,id,"cHat",1),get_base1(iObs,i,"iObs",1),"cHat",2), 
                                "assigning variable cHatObs");
                }
            }

            // validate transformed parameters
            current_statement_begin__ = 90;
            current_statement_begin__ = 91;
            for (int k0__ = 0; k0__ < np; ++k0__) {
                check_greater_or_equal(function__,"cHat[k0__]",cHat[k0__],0);
            }
            current_statement_begin__ = 92;
            for (int k0__ = 0; k0__ < np; ++k0__) {
                check_greater_or_equal(function__,"cHatObs[k0__]",cHatObs[k0__],0);
            }
            current_statement_begin__ = 93;
            for (int k0__ = 0; k0__ < np; ++k0__) {
                check_greater_or_equal(function__,"x[k0__]",x[k0__],0);
            }

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < nTheta; ++k_1__) {
                for (int k_0__ = 0; k_0__ < (np * nt); ++k_0__) {
                vars__.push_back(theta[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                for (int k_0__ = 0; k_0__ < np; ++k_0__) {
                vars__.push_back(cHat[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nObs; ++k_1__) {
                for (int k_0__ = 0; k_0__ < np; ++k_0__) {
                vars__.push_back(cHatObs[k_0__][k_1__]);
                }
            }
            for (int k_2__ = 0; k_2__ < 3; ++k_2__) {
                for (int k_1__ = 0; k_1__ < nt; ++k_1__) {
                    for (int k_0__ = 0; k_0__ < np; ++k_0__) {
                    vars__.push_back(x[k_0__](k_1__, k_2__));
                    }
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 149;
            validate_non_negative_index("cObsPred", "np", np);
            validate_non_negative_index("cObsPred", "nObs", nObs);
            vector<vector<local_scalar_t__> > cObsPred(np, (vector<local_scalar_t__>(nObs)));
            stan::math::initialize(cObsPred, DUMMY_VAR__);
            stan::math::fill(cObsPred,DUMMY_VAR__);


            current_statement_begin__ = 151;
            for (int id = 1; id <= np; ++id) {

                current_statement_begin__ = 152;
                for (int i = 1; i <= nObs; ++i) {

                    current_statement_begin__ = 153;
                    stan::model::assign(cObsPred, 
                                stan::model::cons_list(stan::model::index_uni(id), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                stan::math::exp(normal_rng(stan::math::log(get_base1(get_base1(cHatObs,id,"cHatObs",1),i,"cHatObs",2)),get_base1(sigma,id,"sigma",1), base_rng__)), 
                                "assigning variable cObsPred");
                }
            }

            // validate generated quantities
            current_statement_begin__ = 149;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < nObs; ++k_1__) {
                for (int k_0__ = 0; k_0__ < np; ++k_0__) {
                vars__.push_back(cObsPred[k_0__][k_1__]);
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "pop_pk_twocpt_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "CL" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Q" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "V1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "V2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ka" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= nTheta; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (np * nt); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cHat" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nObs; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cHatObs" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_2__ = 1; k_2__ <= 3; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= nObs; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cObsPred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "CL" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Q" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "V1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "V2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ka" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= nTheta; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= (np * nt); ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cHat" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nObs; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "cHatObs" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_2__ = 1; k_2__ <= 3; ++k_2__) {
                for (int k_1__ = 1; k_1__ <= nt; ++k_1__) {
                    for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= nObs; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= np; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cObsPred" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}

typedef pop_pk_twocpt_model_namespace::pop_pk_twocpt_model stan_model;

